name: M31-Mini CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      chroma:
        image: ghcr.io/chroma-core/chroma:0.4.22
        ports:
          - 8100:8000
        env:
          ALLOW_RESET: true
          ANONYMIZED_TELEMETRY: false
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov mypy ruff
    
    - name: Lint with ruff
      working-directory: ./backend
      run: |
        ruff check .
    
    - name: Type check with mypy
      working-directory: ./backend
      run: |
        mypy .
    
    - name: Test with pytest
      working-directory: ./backend
      env:
        LLM_BASE_URL: "https://openrouter.ai/api/v1"
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        REDIS_HOST: "localhost"
        CHROMA_HOST: "localhost"
        CHROMA_PORT: 8100
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Build project
      working-directory: ./frontend
      run: npm run build
      env:
        API_URL: "http://localhost:8000/api/v1"

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/m31-mini-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/m31-mini-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 